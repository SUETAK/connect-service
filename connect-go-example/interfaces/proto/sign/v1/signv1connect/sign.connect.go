// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/sign/v1/sign.proto

package signv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "example/interfaces/proto/sign/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SignServiceName is the fully-qualified name of the SignService service.
	SignServiceName = "sign.v1.SignService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SignServiceSignInProcedure is the fully-qualified name of the SignService's SignIn RPC.
	SignServiceSignInProcedure = "/sign.v1.SignService/SignIn"
	// SignServiceSignUpProcedure is the fully-qualified name of the SignService's SignUp RPC.
	SignServiceSignUpProcedure = "/sign.v1.SignService/SignUp"
)

// SignServiceClient is a client for the sign.v1.SignService service.
type SignServiceClient interface {
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
	SignUp(context.Context, *connect.Request[v1.SignUpRequest]) (*connect.Response[v1.SignUpResponse], error)
}

// NewSignServiceClient constructs a client for the sign.v1.SignService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSignServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SignServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &signServiceClient{
		signIn: connect.NewClient[v1.SignInRequest, v1.SignInResponse](
			httpClient,
			baseURL+SignServiceSignInProcedure,
			opts...,
		),
		signUp: connect.NewClient[v1.SignUpRequest, v1.SignUpResponse](
			httpClient,
			baseURL+SignServiceSignUpProcedure,
			opts...,
		),
	}
}

// signServiceClient implements SignServiceClient.
type signServiceClient struct {
	signIn *connect.Client[v1.SignInRequest, v1.SignInResponse]
	signUp *connect.Client[v1.SignUpRequest, v1.SignUpResponse]
}

// SignIn calls sign.v1.SignService.SignIn.
func (c *signServiceClient) SignIn(ctx context.Context, req *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// SignUp calls sign.v1.SignService.SignUp.
func (c *signServiceClient) SignUp(ctx context.Context, req *connect.Request[v1.SignUpRequest]) (*connect.Response[v1.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// SignServiceHandler is an implementation of the sign.v1.SignService service.
type SignServiceHandler interface {
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
	SignUp(context.Context, *connect.Request[v1.SignUpRequest]) (*connect.Response[v1.SignUpResponse], error)
}

// NewSignServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSignServiceHandler(svc SignServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	signServiceSignInHandler := connect.NewUnaryHandler(
		SignServiceSignInProcedure,
		svc.SignIn,
		opts...,
	)
	signServiceSignUpHandler := connect.NewUnaryHandler(
		SignServiceSignUpProcedure,
		svc.SignUp,
		opts...,
	)
	return "/sign.v1.SignService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SignServiceSignInProcedure:
			signServiceSignInHandler.ServeHTTP(w, r)
		case SignServiceSignUpProcedure:
			signServiceSignUpHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSignServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSignServiceHandler struct{}

func (UnimplementedSignServiceHandler) SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sign.v1.SignService.SignIn is not implemented"))
}

func (UnimplementedSignServiceHandler) SignUp(context.Context, *connect.Request[v1.SignUpRequest]) (*connect.Response[v1.SignUpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sign.v1.SignService.SignUp is not implemented"))
}

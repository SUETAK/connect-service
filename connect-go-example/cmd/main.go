package main

import (
	"context"
	"example/openai"
	"fmt"
	"github.com/bufbuild/connect-go"
	"github.com/joho/godotenv"
	"github.com/rs/cors"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"log"
	"net/http"
	"os"

	elizav1 "example/gen/eliza/v1"        // generated by protoc-gen-go
	"example/gen/eliza/v1/elizav1connect" // generated by protoc-gen-connect-go
)

type ElizaServer struct {
	openaiClient *openai.Client
}

func NewElizaServer(openaiKey string) *ElizaServer {
	return &ElizaServer{
		openaiClient: openai.NewClient(openaiKey),
	}
}

func (s *ElizaServer) Say(
	ctx context.Context,
	req *connect.Request[elizav1.SayRequest],
) (*connect.Response[elizav1.SayResponse], error) {
	log.Println("Request headers: ", req.Header())
	openaiRes, err := s.openaiClient.GetCompletion(req.Msg.Sentence, 60)
	if err != nil {
		return nil, err
	}
	log.Println(openaiRes)

	res := connect.NewResponse(&elizav1.SayResponse{
		Sentence: fmt.Sprintf("Hello, %s! Here is a completion: %s", req.Msg.Sentence, openaiRes),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func main() {
	address := "0.0.0.0:8000"
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	openaiKey := os.Getenv("OPENAI_KEY")
	if openaiKey == "" {
		log.Fatal("OPENAI_KEY environment variable must be set")
	}
	eliza := NewElizaServer(openaiKey)

	mux := http.NewServeMux()
	path, handler := elizav1connect.NewElizaServiceHandler(eliza)
	mux.Handle(path, handler)

	corsHandler := cors.AllowAll().Handler(h2c.NewHandler(mux, &http2.Server{}))
	http.ListenAndServe(
		address,
		corsHandler,
	)
}
